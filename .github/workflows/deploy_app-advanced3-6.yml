name: Build and deploy Next.js app to Azure Web App
on:
  push:
    branches:
      - deploy
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: npm install
        run: npm ci
      
      - name: Update server.js to support ESM
        run: |
          cat > server.js << 'EOF'
          // Add diagnostic logging
          console.log("Starting server.js");
          console.log("NODE_ENV:", process.env.NODE_ENV);
          console.log("PORT:", process.env.PORT);
          console.log("CWD:", process.cwd());
          try {
            // Use Node's fs instead of Deno
            import { readdirSync } from 'fs';
            console.log("Files in directory:", readdirSync("./").join(", "));
          } catch (e) {
            console.log("Could not list files:", e.message);
          }

          import { createServer } from "http";
          import { parse } from "url";
          import next from "next";
          import { fileURLToPath } from "url";
          import { dirname } from "path";

          // Create equivalent of __dirname for ES modules
          const __filename = fileURLToPath(import.meta.url);
          const __dirname = dirname(__filename);

          // Create the Next.js app
          const app = next({
            dev: process.env.NODE_ENV !== "production",
            dir: __dirname,
          });
          const handle = app.getRequestHandler();

          // Get port from environment variable
          const port = process.env.PORT || 3000;

          // Prepare the app and start the server
          app
            .prepare()
            .then(() => {
              createServer((req, res) => {
                // Parse the URL
                const parsedUrl = parse(req.url, true);

                // Let Next.js handle the request
                handle(req, res, parsedUrl);
              }).listen(port, (err) => {
                if (err) throw err;
                console.log(`> Ready on http://localhost:${port}`);
                console.log(`> Environment: ${process.env.NODE_ENV}`);
              });
            })
            .catch((err) => {
              console.error("Error starting server:", err);
              console.error("Error details:", err.stack);
              process.exit(1);
            });
          EOF
      
      - name: Create next.config.mjs (ESM version)
        run: |
          echo "/** @type {import('next').NextConfig} */" > next.config.mjs
          echo "const nextConfig = {" >> next.config.mjs
          echo "  output: \"standalone\"," >> next.config.mjs
          echo "};" >> next.config.mjs
          echo "export default nextConfig;" >> next.config.mjs
          
      - name: Create postcss.config.mjs (ESM version)
        run: |
          echo "/** @type {import('postcss-load-config').Config} */" > postcss.config.mjs
          echo "export default {" >> postcss.config.mjs
          echo "  plugins: {" >> postcss.config.mjs
          echo "    tailwindcss: {}," >> postcss.config.mjs
          echo "    autoprefixer: {}," >> postcss.config.mjs
          echo "  }," >> postcss.config.mjs
          echo "};" >> postcss.config.mjs
      
      - name: Create optimized production build
        run: npm run build
      
      - name: Fix fs import issue in server.js
        run: |
          # The dynamic import of fs might cause issues, let's fix it
          sed -i 's/import { readdirSync } from '\''fs'\'';/import fs from '\''fs'\''; const readdirSync = fs.readdirSync;/' server.js
          
      - name: Create startup script
        run: |
          echo "#!/bin/sh" > startup.sh
          echo "export NODE_ENV=production" >> startup.sh
          echo "echo 'Starting application...'" >> startup.sh
          echo "node --trace-warnings server.js" >> startup.sh
          chmod +x startup.sh
      
      - name: Zip artifact for deployment
        run: |
          zip -r release.zip . -x "*.git*" "node_modules/*" ".next/cache/*"
          
      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: release.zip
          
  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app
          
      - name: Unzip artifact for deployment
        run: unzip release.zip
        
      - name: Install production dependencies
        run: npm ci --omit=dev
      
      - name: Verify Node.js and Next.js versions
        run: |
          echo "Node.js version:"
          node --version
          echo "NPM version:"
          npm --version
          echo "Package versions:"
          cat package.json | grep -E '"next"|"react"|"react-dom"'
      
      - name: 'Deploy to Azure Web App'
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'app-advanced3-6'
          slot-name: 'Production'
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: .
