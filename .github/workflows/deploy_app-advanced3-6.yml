name: Build and deploy Next.js app to Azure Web App
on:
  push:
    branches:
      - deploy
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: npm install
        run: npm ci
      
      # List files before making changes
      - name: List files before
        run: ls -la
          
      - name: Create server.js file explicitly
        run: |
          cat > server.js << 'EOF'
          // Add diagnostic logging
          console.log("Starting server.js");
          console.log("NODE_ENV:", process.env.NODE_ENV);
          console.log("PORT:", process.env.PORT);
          console.log("CWD:", process.cwd());
          
          // Use async IIFE pattern to allow top-level await
          (async function() {
            try {
              // Dynamic imports
              const { createServer } = await import("http");
              const { parse } = await import("url");
              const { default: next } = await import("next");
              const { fileURLToPath } = await import("url");
              const { dirname } = await import("path");
              const fs = await import("fs");
              
              try {
                console.log("Files in directory:", fs.readdirSync(".").join(", "));
              } catch (e) {
                console.log("Could not list files:", e.message);
              }
              
              // Create equivalent of __dirname for ES modules
              const __filename = fileURLToPath(import.meta.url);
              const __dirname = dirname(__filename);
              
              // Get port from environment variable
              const port = process.env.PORT || 3000;
              
              // Create the Next.js app
              const app = next({
                dev: process.env.NODE_ENV !== "production",
                dir: __dirname,
              });
              const handle = app.getRequestHandler();
              
              console.log("Initializing Next.js app...");
              
              try {
                // Use await instead of then chains for better error handling
                await app.prepare();
                console.log("Next.js app prepared, starting HTTP server...");
                
                createServer((req, res) => {
                  // Parse the URL
                  const parsedUrl = parse(req.url, true);
                  // Let Next.js handle the request
                  handle(req, res, parsedUrl);
                }).listen(port, (err) => {
                  if (err) throw err;
                  console.log(`> Ready on http://localhost:${port}`);
                  console.log(`> Environment: ${process.env.NODE_ENV}`);
                });
              } catch (err) {
                console.error("Error preparing Next.js app:", err);
                console.error("Error stack:", err.stack);
                process.exit(1);
              }
            } catch (err) {
              console.error("Error loading modules:", err);
              console.error("Error stack:", err.stack);
              process.exit(1);
            }
          })();
          EOF
          
          # Verify the file was created
          ls -la server.js
          cat server.js | head -10
      
      - name: Create next.config.mjs
        run: |
          echo "/** @type {import('next').NextConfig} */" > next.config.mjs
          echo "const nextConfig = {" >> next.config.mjs
          echo "  output: \"standalone\"," >> next.config.mjs
          echo "};" >> next.config.mjs
          echo "export default nextConfig;" >> next.config.mjs
          
      - name: Create optimized production build
        run: npm run build
      
      # List files to verify our deployment package contents
      - name: List files after build
        run: |
          echo "Root directory:"
          ls -la
          echo ""
          echo ".next directory:"
          ls -la .next
          echo ""
          echo "Check for standalone directory:"
          if [ -d ".next/standalone" ]; then
            echo "Standalone directory exists"
            ls -la .next/standalone
          else
            echo "No standalone directory found"
          fi
          
      - name: Zip artifact for deployment
        run: |
          # Make sure to include server.js explicitly
          zip -r release.zip . -x "*.git*" "node_modules/*" ".next/cache/*"
          
      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: release.zip
          
  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app
          
      - name: Unzip artifact for deployment
        run: unzip release.zip
        
      # List files to verify server.js exists
      - name: List deployment files
        run: |
          echo "Contents of deployment package:"
          ls -la
          echo "Is server.js present?"
          if [ -f server.js ]; then
            echo "YES - server.js exists"
            cat server.js | head -5
          else
            echo "NO - server.js is missing"
          fi
        
      - name: Install production dependencies
        run: npm ci --omit=dev
        
      - name: Verify Node.js version
        run: |
          node --version
          npm --version
          echo "Environment info:"
          echo "NODE_ENV: $NODE_ENV"
          echo "NODE_OPTIONS: $NODE_OPTIONS"
      
      - name: 'Deploy to Azure Web App'
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'app-advanced3-6'
          slot-name: 'Production'
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: .
