name: Build and deploy Next.js app to Azure Web App
on:
  push:
    branches:
      - deploy
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: npm install
        run: npm ci
      
      # Create proper ES modules server.js file
      - name: Create server.js file
        run: |
          cat > server.js << 'EOF'
          // server.js - ES module version
          console.log("Starting server.js (ES module version)...");
          console.log("NODE_ENV:", process.env.NODE_ENV);
          console.log("PORT:", process.env.PORT);
          console.log("CWD:", process.cwd());

          // ES module imports
          import { createServer } from 'http';
          import { parse } from 'url';
          import { fileURLToPath } from 'url';
          import { dirname, join } from 'path';
          import * as fs from 'fs';
          import next from 'next';

          // Create __dirname equivalent for ES modules
          const __filename = fileURLToPath(import.meta.url);
          const __dirname = dirname(__filename);

          try {
            console.log("Files in directory:", fs.readdirSync(".").join(", "));
          } catch (e) {
            console.log("Could not list files:", e.message);
          }

          // Wrap everything in an async function for better error handling
          const startServer = async () => {
            try {
              const port = process.env.PORT || 3000;
              const dev = process.env.NODE_ENV !== "production";
              
              console.log(`Starting server in ${dev ? "development" : "production"} mode`);
              
              // Check for standalone directory
              const standaloneDir = join(".next", "standalone");
              if (fs.existsSync(standaloneDir)) {
                console.log("Standalone directory exists at:", standaloneDir);
                console.log("Contents:", fs.readdirSync(standaloneDir).join(", "));
                
                try {
                  // Import the standalone server (ES modules approach)
                  console.log("Trying to load standalone server...");
                  const standaloneServerPath = join(process.cwd(), '.next', 'standalone', 'server.js');
                  console.log("Standalone server path:", standaloneServerPath);
                  
                  // Dynamic import of the standalone server
                  await import(standaloneServerPath);
                  return; // Exit if successful
                } catch (e) {
                  console.error("Failed to load standalone server:", e.message, e.stack);
                  console.log("Falling back to custom server...");
                }
              } else {
                console.log("No standalone directory found - using custom server");
              }
              
              // Create custom Next.js server
              const app = next({ dev, dir: __dirname });
              const handle = app.getRequestHandler();
              
              console.log("Preparing Next.js app...");
              try {
                await app.prepare();
                console.log("Next.js app prepared, starting HTTP server...");
                
                createServer((req, res) => {
                  const parsedUrl = parse(req.url, true);
                  handle(req, res, parsedUrl);
                }).listen(port, (err) => {
                  if (err) {
                    console.error("Error starting server:", err);
                    throw err;
                  }
                  console.log(`> Ready on http://localhost:${port}`);
                  console.log(`> Environment: ${process.env.NODE_ENV}`);
                });
              } catch (err) {
                console.error("Error preparing Next.js app:", err);
                console.error("Error details:", err.stack);
                process.exit(1);
              }
            } catch (err) {
              console.error("Fatal error:", err);
              console.error("Error details:", err.stack);
              process.exit(1);
            }
          };

          // Start the server
          startServer().catch(err => {
            console.error("Unhandled server startup error:", err);
            process.exit(1);
          });
          EOF
          
      - name: Create next.config.mjs
        run: |
          echo "/** @type {import('next').NextConfig} */" > next.config.mjs
          echo "const nextConfig = {" >> next.config.mjs
          echo "  output: \"standalone\"," >> next.config.mjs
          echo "};" >> next.config.mjs
          echo "export default nextConfig;" >> next.config.mjs
          
      - name: Create optimized production build
        run: npm run build
        
      # List files to verify our deployment package contents
      - name: List files after build
        run: |
          echo "Root directory:"
          ls -la
          echo ""
          echo ".next directory:"
          ls -la .next
          echo ""
          echo "Check for standalone directory:"
          if [ -d ".next/standalone" ]; then
            echo "Standalone directory exists"
            ls -la .next/standalone
          else
            echo "No standalone directory found"
          fi
          
      # Enable detailed debugging for Azure
      - name: Create .env file with debugging enabled
        run: |
          echo "NODE_ENV=production" > .env
          echo "DEBUG=*" >> .env
          
      - name: Zip artifact for deployment
        run: |
          zip -r release.zip . -x "*.git*" "node_modules/*" ".next/cache/*"
          
      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: release.zip
          
  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app
          
      - name: Unzip artifact for deployment
        run: unzip release.zip
        
      - name: Install production dependencies
        run: npm ci --omit=dev
      
      - name: 'Deploy to Azure Web App'
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'app-advanced3-6'
          slot-name: 'Production'
          package: .
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_C7AF3C67063044F78A4C9DCCF73FAB83 }}
